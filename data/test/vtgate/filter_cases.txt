# No where clause
"select id from user"
{
  "Original": "select id from user",
  "Instructions": {
    "PlanID": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user",
    "FieldQuery": "select id from user where 1 != 1"
  }
}

# Single table unique vindex route
"select id from user where user.id = 5"
{
  "Original": "select id from user where user.id = 5",
  "Instructions": {
    "PlanID": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where user.id = 5",
    "FieldQuery": "select id from user where 1 != 1",
    "Vindex": "user_index",
    "Values": 5
  }
}

# Single table multiple unique vindex match
"select id from music where id = 5 and user_id = 4"
{
  "Original": "select id from music where id = 5 and user_id = 4",
  "Instructions": {
    "PlanID": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from music where id = 5 and user_id = 4",
    "FieldQuery": "select id from music where 1 != 1",
    "Vindex": "user_index",
    "Values": 4
  }
}

# Single table multiple non-unique vindex match
"select id from user where costly = 'aa' and name = 'bb'"
{
  "Original": "select id from user where costly = 'aa' and name = 'bb'",
  "Instructions": {
    "PlanID": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where costly = 'aa' and name = 'bb'",
    "FieldQuery": "select id from user where 1 != 1",
    "Vindex": "name_user_map",
    "Values": "bb"
  }
}

# Single table multiple non-unique vindex match for IN clause
"select id from user where costly in ('aa', 'bb') and name in ('aa', 'bb')"
{
  "Original": "select id from user where costly in ('aa', 'bb') and name in ('aa', 'bb')",
  "Instructions": {
    "PlanID": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where costly in ('aa', 'bb') and name in ::_vals",
    "FieldQuery": "select id from user where 1 != 1",
    "Vindex": "name_user_map",
    "Values": [
      "aa",
      "bb"
    ]
  }
}

# Single table complex in clause
"select id from user where name in (col, 'bb')"
{
  "Original": "select id from user where name in (col, 'bb')",
  "Instructions": {
    "PlanID": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where name in (col, 'bb')",
    "FieldQuery": "select id from user where 1 != 1"
  }
}

# Single table in clause list arg
"select id from user where name in ::list"
{
  "Original": "select id from user where name in ::list",
  "Instructions": {
    "PlanID": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where name in ::_vals",
    "FieldQuery": "select id from user where 1 != 1",
    "Vindex": "name_user_map",
    "Values": "::list"
  }
}

# Multi-table unique vindex constraint
"select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5"
{
  "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5",
  "Instructions": {
    "PlanID": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5",
    "FieldQuery": "select user_extra.id from user join user_extra where 1 != 1",
    "Vindex": "user_index",
    "Values": 5
  }
}

# Multi-table unique vindex constraint on right table
"select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5"
{
  "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
  "Instructions": {
    "PlanID": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
    "FieldQuery": "select user_extra.id from user join user_extra where 1 != 1",
    "Vindex": "user_index",
    "Values": 5
  }
}

# Multi-table unique vindex constraint on left table of left join
"select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5"
{
  "Original": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5",
  "Instructions": {
    "PlanID": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5",
    "FieldQuery": "select user_extra.id from user left join user_extra on 1 != 1 where 1 != 1",
    "Vindex": "user_index",
    "Values": 5
  }
}

# Multi-table unique vindex constraint on left-joined right table
"select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5"
{
  "Original": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
  "Instructions": {
    "PlanID": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
    "FieldQuery": "select user_extra.id from user left join user_extra on 1 != 1 where 1 != 1"
  }
}

# Multi-route unique vindex constraint
"select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5"
{
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5",
  "Instructions": {
    "Left": {
      "PlanID": "SelectEqualUnique",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.col from user where user.id = 5",
      "FieldQuery": "select user.col from user where 1 != 1",
      "Vindex": "user_index",
      "Values": 5
    },
    "Right": {
      "PlanID": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_extra.id from user_extra where user_extra.col = :col",
      "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
      "JoinVars": {
        "col": {}
      }
    },
    "Cols": [
      1
    ],
    "Vars": {
      "col": 0
    }
  }
}

# Multi-route unique vindex route on both routes
"select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5 and user_extra.user_id = 5"
{
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5 and user_extra.user_id = 5",
  "Instructions": {
    "Left": {
      "PlanID": "SelectEqualUnique",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.col from user where user.id = 5",
      "FieldQuery": "select user.col from user where 1 != 1",
      "Vindex": "user_index",
      "Values": 5
    },
    "Right": {
      "PlanID": "SelectEqualUnique",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_extra.id from user_extra where user_extra.col = :col and user_extra.user_id = 5",
      "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
      "Vindex": "user_index",
      "Values": 5,
      "JoinVars": {
        "col": {}
      }
    },
    "Cols": [
      1
    ],
    "Vars": {
      "col": 0
    }
  }
}

# Multi-route with cross-route constraint
"select user_extra.id from user join user_extra on user.col = user_extra.col where user_extra.user_id = user.col"
{
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user_extra.user_id = user.col",
  "Instructions": {
    "Left": {
      "PlanID": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.col from user",
      "FieldQuery": "select user.col from user where 1 != 1"
    },
    "Right": {
      "PlanID": "SelectEqualUnique",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_extra.id from user_extra where user_extra.col = :col and user_extra.user_id = :col",
      "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
      "Vindex": "user_index",
      "Values": ":col",
      "JoinVars": {
        "col": {}
      }
    },
    "Cols": [
      1
    ],
    "Vars": {
      "col": 0
    }
  }
}

# Multi-route with non-route constraint, should use first route.
"select user_extra.id from user join user_extra on user.col = user_extra.col where 1 = 1"
{
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where 1 = 1",
  "Instructions": {
    "Left": {
      "PlanID": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.col from user where 1 = 1",
      "FieldQuery": "select user.col from user where 1 != 1"
    },
    "Right": {
      "PlanID": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_extra.id from user_extra where user_extra.col = :col",
      "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
      "JoinVars": {
        "col": {}
      }
    },
    "Cols": [
      1
    ],
    "Vars": {
      "col": 0
    }
  }
}

# Route with multiple route constraints, SelectIN is the best constraint.
"select id from user where user.col = 5 and user.id in (1, 2)"
{
  "Original": "select id from user where user.col = 5 and user.id in (1, 2)",
  "Instructions": {
    "PlanID": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where user.col = 5 and user.id in ::_vals",
    "FieldQuery": "select id from user where 1 != 1",
    "Vindex": "user_index",
    "Values": [
      1,
      2
    ]
  }
}

# Route with multiple route constraints, SelectEqual is the best constraint.
"select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'"
{
  "Original": "select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'",
  "Instructions": {
    "PlanID": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'",
    "FieldQuery": "select id from user where 1 != 1",
    "Vindex": "name_user_map",
    "Values": "aa"
  }
}

# Route with multiple route constraints, SelectEqualUnique is the best constraint.
"select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1"
{
  "Original": "select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1",
  "Instructions": {
    "PlanID": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1",
    "FieldQuery": "select id from user where 1 != 1",
    "Vindex": "user_index",
    "Values": 1
  }
}

# Route with multiple route constraints, SelectEqualUnique is the best constraint, order reversed.
"select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5"
{
  "Original": "select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5",
  "Instructions": {
    "PlanID": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5",
    "FieldQuery": "select id from user where 1 != 1",
    "Vindex": "user_index",
    "Values": 1
  }
}

# Route with OR and AND clause, must parenthesize correctly.
"select id from user where user.id = 1 or user.name = 'aa' and user.id in (1, 2)"
{
  "Original": "select id from user where user.id = 1 or user.name = 'aa' and user.id in (1, 2)",
  "Instructions": {
    "PlanID": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where (user.id = 1 or user.name = 'aa' and user.id in (1, 2))",
    "FieldQuery": "select id from user where 1 != 1"
  }
}

# Unsharded route
"select main1.id from user join main1 where main1.id = user.id"
{
  "Original": "select main1.id from user join main1 where main1.id = user.id",
  "Instructions": {
    "Left": {
      "PlanID": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.id from user",
      "FieldQuery": "select user.id from user where 1 != 1"
    },
    "Right": {
      "PlanID": "SelectUnsharded",
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select main1.id from main1 where main1.id = :id",
      "FieldQuery": "select main1.id from main1 where 1 != 1",
      "JoinVars": {
        "id": {}
      }
    },
    "Cols": [
      1
    ],
    "Vars": {
      "id": 0
    }
  }
}

# Correlated subquery in where clause
"select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)"
{
  "Original": "select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)",
  "Instructions": {
    "PlanID": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)",
    "FieldQuery": "select id from user where 1 != 1"
  }
}

# Correlated subquery in having clause, very rare use case.
# We're testing to make sure that the inner 'id' finds the outer id of the select.
# The subquery query needs to be a join. Otherwise, unqualified references bind to the default inner table.
"select id, col from user having col in (select user_extra.col from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = id)"
{
  "Original": "select id, col from user having col in (select user_extra.col from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = id)",
  "Instructions": {
    "PlanID": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id, col from user having col in (select user_extra.col from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = id)",
    "FieldQuery": "select id, col from user where 1 != 1"
  }
}

# Correlated subquery in having clause, subquery also has having clause, even more rare case.
# We're testing to make sure that the inner 'id' finds the outer id of the select. The code path
# is different for the having clause. So, we have a separate test case for it.
"select id, col from user having col in (select user_extra.col extra_col, user.id as user_id from user join user_extra on user.id = user_extra.user_id having user_id = id and extra_col = col)"
{
  "Original": "select id, col from user having col in (select user_extra.col extra_col, user.id as user_id from user join user_extra on user.id = user_extra.user_id having user_id = id and extra_col = col)",
  "Instructions": {
    "PlanID": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select id, col from user having col in (select user_extra.col as extra_col, user.id as user_id from user join user_extra on user.id = user_extra.user_id having user_id = id and extra_col = col)",
    "FieldQuery": "select id, col from user where 1 != 1"
  }
}

# Correlated subquery in having clause, subquery also has having clause, even more rare case.
# We're looking for symbol not found error this time.
"select id, col from user having col in (select user_extra.col, user.id as user_id from user join user_extra on user.id = user_extra.user_id having user_id = notthere)"
"symbol notthere not found"
