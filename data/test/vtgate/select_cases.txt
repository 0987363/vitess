# syntax error
"the quick brown fox"
{
  "ID":"NoPlan",
  "Reason":"syntax error at position 4 near the",
  "Table":null,
  "Original":"the quick brown fox",
  "Rewritten":"",
  "Index":null,
  "Values":null
}

# unions not supported yet
"select * from user union select * from user"
{
  "ID":"NoPlan",
  "Reason":"too complex",
  "Table":null,
  "Original":"select * from user union select * from user",
  "Rewritten":"",
  "Index":null,
  "Values":null
}

# set statements not supported yet
"set a=1"
{
  "ID":"NoPlan",
  "Reason":"too complex",
  "Table":null,
  "Original":"set a=1",
  "Rewritten":"",
  "Index":null,
  "Values":null
}

# ddl not supported yet
"create table a()"
{
  "ID":"NoPlan",
  "Reason":"too complex",
  "Table":null,
  "Original":"create table a()",
  "Rewritten":"",
  "Index":null,
  "Values":null
}

# admin statements not supported yet
"explain select * from user"
{
  "ID":"NoPlan",
  "Reason":"too complex",
  "Table":null,
  "Original":"explain select * from user",
  "Rewritten":"",
  "Index":null,
  "Values":null
}

# select with complex table expression
"select * from (select 2 from dual)"
{
  "ID":"NoPlan",
  "Reason":"complex table expression",
  "Table":null,
  "Original":"select * from (select 2 from dual)",
  "Rewritten":"",
  "Index":null,
  "Values":null
}

# select on non-existent table
"select * from nouser where id = 1"
{
  "ID":"NoPlan",
  "Reason":"table nouser not found",
  "Table":null,
  "Original":"select * from nouser where id = 1",
  "Rewritten":"",
  "Index":null,
  "Values":null
}

# select with join
"select * from music, user where id = 1"
{
  "ID":"NoPlan",
  "Reason":"complex table expression",
  "Table":null,
  "Original":"select * from music, user where id = 1",
  "Rewritten":"",
  "Index":null,
  "Values":null
}

# select with parenthesized table expr
"select * from (user) where id = 1"
{
  "ID":"NoPlan",
  "Reason":"complex table expression",
  "Table":null,
  "Original":"select * from (user) where id = 1",
  "Rewritten":"",
  "Index":null,
  "Values":null
}

# select unsharded table
"select * from main1"
{
  "ID":"SelectUnsharded",
  "Reason":"",
  "Table":"main1",
  "Original":"select * from main1",
  "Rewritten":"select * from main1",
  "Index":null,
  "Values":null
}

# select with no where clause
"select * from user"
{
  "ID": "SelectScatter",
  "Reason": "no where clause",
  "Table": "user",
  "Original":"select * from user",
  "Rewritten": "select * from user",
  "Index": null,
  "Values": null
}

# select with subquery
"select * from user where id in (select * from music)"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where id in (select * from music)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in NOT expression
"select * from user where not (id in (select * from music))"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where not (id in (select * from music))",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in range expression
"select * from user where id between (select 1 from dual) and 2"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where id between (select 1 from dual) and 2",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in null check
"select * from user where (select 1 from dual) is null"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where (select 1 from dual) is null",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in exists
"select * from user where exists (select 1 from dual)"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where exists (select 1 from dual)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in binary expr
"select * from user where 1+1 = (select 1 from dual)"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where 1+1 = (select 1 from dual)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in unary expr
"select * from user where id = -(select 1 from dual)"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where id = -(select 1 from dual)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in func expr
"select * from user where id = func(1, (select 1 from dual))"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where id = func(1, (select 1 from dual))",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with no subquery in func expr
"select * from user where id = func(1)"
{
  "ID":"SelectScatter",
  "Reason":"no index match",
  "Table":"user",
  "Original":"select * from user where id = func(1)",
  "Rewritten":"select * from user where id = func(1)",
  "Index":null,
  "Values":null
}

# select with subquery in case Expr
"select * from user where id = case (select 1 from dual) when a=b then c end"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where id = case (select 1 from dual) when a=b then c end",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in case Else
"select * from user where id = case aa when a = b then c else (select 1 from dual) end"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where id = case aa when a = b then c else (select 1 from dual) end",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in case When cond
"select * from user where id = case aa when (select 1 from dual) = b then c else d end"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where id = case aa when (select 1 from dual) = b then c else d end",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with subquery in case When expr
"select * from user where id = case aa when a = b then (select 1 from dual) else d end"
{
  "ID": "NoPlan",
  "Reason": "has subquery",
  "Table": "user",
  "Original":"select * from user where id = case aa when a = b then (select 1 from dual) else d end",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# select with no subquery in case
"select * from user where id = case aa when a = b then c end"
{
  "ID":"SelectScatter",
  "Reason":"no index match",
  "Table":"user",
  "Original":"select * from user where id = case aa when a = b then c end",
  "Rewritten": "select * from user where id = case aa when a = b then c end",
  "Index":null,
  "Values":null
}

# select by primary keyspace id, inverted
"select * from user where 1 = id"
{
  "ID":"SelectScatter",
  "Reason":"no index match",
  "Table":"user",
  "Original":"select * from user where 1 = id",
  "Rewritten":"select * from user where 1 = id",
  "Index":null,
  "Values":null
}

# select by primary keyspace id
"select * from user where id = 1"
{
  "ID": "SelectSingleShardKey",
  "Reason": "",
  "Table": "user",
  "Original":"select * from user where id = 1",
  "Rewritten": "select * from user where id = 1",
  "Index": {
    "Type": 0,
    "Column": "id",
    "Name": "user_index",
    "From": "",
    "To": "",
    "Owner": "user",
    "IsAutoInc": true
  },
  "Values": 1
}

# select by primary keyspace id, invalid value
"select * from user where id = 1.1"
{
  "ID":"SelectScatter",
  "Reason":"no index match",
  "Table":"user",
  "Original":"select * from user where id = 1.1",
  "Rewritten":"select * from user where id = 1.1",
  "Index":null,
  "Values":null
}

# select with primary keyspace id through bind var
"select * from user where id = :id"
{
  "ID": "SelectSingleShardKey",
  "Reason": "",
  "Table": "user",
  "Original":"select * from user where id = :id",
  "Rewritten": "select * from user where id = :id",
  "Index": {
    "Type": 0,
    "Column": "id",
    "Name": "user_index",
    "From": "",
    "To": "",
    "Owner": "user",
    "IsAutoInc": true
  },
  "Values": ":id"
}

# select with primary id through IN clause
"select * from user where id in (1, 2)"
{
  "ID": "SelectMultiShardKey",
  "Reason": "",
  "Table": "user",
  "Original":"select * from user where id in (1, 2)",
  "Rewritten": "select * from user where id in ::_vals",
  "Index": {
    "Type": 0,
    "Column": "id",
    "Name": "user_index",
    "From": "",
    "To": "",
    "Owner": "user",
    "IsAutoInc": true
  },
  "Values": [
    1,
    2
  ]
}

# select with primary id through IN clause, complex expression
"select * from user where id in (1+1, 2)"
{
  "ID":"SelectScatter",
  "Reason":"no index match",
  "Table":"user",
  "Original":"select * from user where id in (1+1, 2)",
  "Rewritten":"select * from user where id in (1+1, 2)",
  "Index":null,
  "Values":null
}

# select with primary id through IN clause, float expression
"select * from user where id in (1.1, 2)"
{
  "ID":"SelectScatter",
  "Reason":"no index match",
  "Table":"user",
  "Original":"select * from user where id in (1.1, 2)",
  "Rewritten":"select * from user where id in (1.1, 2)",
  "Index":null,
  "Values":null
}

# select with no index match
"select * from user where user_id = 1"
{
  "ID": "SelectScatter",
  "Reason": "no index match",
  "Table": "user",
  "Original":"select * from user where user_id = 1",
  "Rewritten": "select * from user where user_id = 1",
  "Index": null,
  "Values": null
}

# select with primary id with different column name
"select * from user_extra where user_id = 1"
{
  "ID": "SelectSingleShardKey",
  "Reason": "",
  "Table": "user_extra",
  "Original":"select * from user_extra where user_id = 1",
  "Rewritten": "select * from user_extra where user_id = 1",
  "Index": {
    "Type": 0,
    "Column": "user_id",
    "Name": "user_index",
    "From": "",
    "To": "",
    "Owner": "user",
    "IsAutoInc": true
  },
  "Values": 1
}

# select with primary id when there's more than one index
"select * from music where user_id = 1"
{
  "ID": "SelectSingleShardKey",
  "Reason": "",
  "Table": "music",
  "Original":"select * from music where user_id = 1",
  "Rewritten": "select * from music where user_id = 1",
  "Index": {
    "Type": 0,
    "Column": "user_id",
    "Name": "user_index",
    "From": "",
    "To": "",
    "Owner": "user",
    "IsAutoInc": true
  },
  "Values": 1
}

# select by lookup
"select * from music where id = 1"
{
  "ID": "SelectSingleLookup",
  "Reason": "",
  "Table": "music",
  "Original":"select * from music where id = 1",
  "Rewritten": "select * from music where id = 1",
  "Index": {
    "Type": 1,
    "Column": "id",
    "Name": "music_user_map",
    "From": "music_id",
    "To": "user_id",
    "Owner": "music",
    "IsAutoInc": true
  },
  "Values": 1
}

# select by lookup with IN clause
"select * from music where id in (1, 2)"
{
  "ID": "SelectMultiLookup",
  "Reason": "",
  "Table": "music",
  "Original":"select * from music where id in (1, 2)",
  "Rewritten": "select * from music where id in ::_vals",
  "Index": {
    "Type": 1,
    "Column": "id",
    "Name": "music_user_map",
    "From": "music_id",
    "To": "user_id",
    "Owner": "music",
    "IsAutoInc": true
  },
  "Values": [
    1,
    2
  ]
}

# select by lookup with IN clause and bind vars
"select * from music where id in (:a, 2)"
{
  "ID": "SelectMultiLookup",
  "Reason": "",
  "Table": "music",
  "Original":"select * from music where id in (:a, 2)",
  "Rewritten": "select * from music where id in ::_vals",
  "Index": {
    "Type": 1,
    "Column": "id",
    "Name": "music_user_map",
    "From": "music_id",
    "To": "user_id",
    "Owner": "music",
    "IsAutoInc": true
  },
  "Values": [
    ":a",
    2
  ]
}

# select by lookup with list bind var
"select * from music where id in ::list"
{
  "ID": "SelectMultiLookup",
  "Reason": "",
  "Table": "music",
  "Original":"select * from music where id in ::list",
  "Rewritten": "select * from music where id in ::_vals",
  "Index": {
    "Type": 1,
    "Column": "id",
    "Name": "music_user_map",
    "From": "music_id",
    "To": "user_id",
    "Owner": "music",
    "IsAutoInc": true
  },
  "Values": "::list"
}

# select by lookup if there's no primary key
"select * from music_extra where music_id = 1"
{
  "ID": "SelectSingleLookup",
  "Reason": "",
  "Table": "music_extra",
  "Original":"select * from music_extra where music_id = 1",
  "Rewritten": "select * from music_extra where music_id = 1",
  "Index": {
    "Type": 1,
    "Column": "music_id",
    "Name": "music_user_map",
    "From": "music_id",
    "To": "user_id",
    "Owner": "music",
    "IsAutoInc": true
  },
  "Values": 1
}

# select with non-parenthesized OR clause at end
"select * from user where id = 1 and var = 2 or var = 3"
{
  "ID": "SelectScatter",
  "Reason": "no index match",
  "Table": "user",
  "Original":"select * from user where id = 1 and var = 2 or var = 3",
  "Rewritten": "select * from user where id = 1 and var = 2 or var = 3",
  "Index": null,
  "Values": null
}

# select with acceptable parenthesized OR clause at end
"select * from user where id = 1 and (var = 2 or var = 3)"
{
  "ID": "SelectSingleShardKey",
  "Reason": "",
  "Table": "user",
  "Original":"select * from user where id = 1 and (var = 2 or var = 3)",
  "Rewritten": "select * from user where id = 1 and (var = 2 or var = 3)",
  "Index": {
    "Type": 0,
    "Column": "id",
    "Name": "user_index",
    "From": "",
    "To": "",
    "Owner": "user",
    "IsAutoInc": true
  },
  "Values": 1
}

# select with non-parenthesized OR clause at beginning
"select * from user where var = 2 or var = 3 and id = 1"
{
  "ID": "SelectScatter",
  "Reason": "no index match",
  "Table": "user",
  "Original":"select * from user where var = 2 or var = 3 and id = 1",
  "Rewritten": "select * from user where var = 2 or var = 3 and id = 1",
  "Index": null,
  "Values": null
}

# select with acceptable parenthesized OR clause at beginning
"select * from user where (var = 2 or var = 3) and id = 1"
{
  "ID": "SelectSingleShardKey",
  "Reason": "",
  "Table": "user",
  "Original":"select * from user where (var = 2 or var = 3) and id = 1",
  "Rewritten": "select * from user where (var = 2 or var = 3) and id = 1",
  "Index": {
    "Type": 0,
    "Column": "id",
    "Name": "user_index",
    "From": "",
    "To": "",
    "Owner": "user",
    "IsAutoInc": true
  },
  "Values": 1
}

# aggregates in select, simple
"select count(*) from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select count(*) from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, AND
"select a = 1 and count(*) = 1 from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select a = 1 and count(*) = 1 from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, OR
"select a = 1 or count(*) = 1 from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select a = 1 or count(*) = 1 from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, parenthesized bool
"select (not count(*) = 1) from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select (not count(*) = 1) from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, BETWEEN
"select count(*) between 1 and 2 from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select count(*) between 1 and 2 from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, IS NULL
"select count(*) is null from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select count(*) is null from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, EXISTS (cannot aggregate)
"select exists (select 1 from dual) from user where id in (1, 2)"
{
  "ID":"SelectMultiShardKey",
  "Reason":"",
  "Table":"user",
  "Original":"select exists (select 1 from dual) from user where id in (1, 2)",
  "Rewritten":"select exists (select 1 from dual) from user where id in ::_vals",
  "Index":{
    "Type":0,
    "Column":"id",
    "Name":"user_index",
    "From":"",
    "To":"",
    "Owner":"user",
    "IsAutoInc":true
    },
  "Values":[1,2]
}

# aggregates in select, subquery
"select (select 1 from dual) from user where id in (1, 2)"
{
  "ID":"SelectMultiShardKey",
  "Reason":"",
  "Table":"user",
  "Original":"select (select 1 from dual) from user where id in (1, 2)",
  "Rewritten": "select (select 1 from dual) from user where id in ::_vals",
  "Index":{
    "Type":0,
    "Column":"id",
    "Name":"user_index",
    "From":"",
    "To":"",
    "Owner":"user",
    "IsAutoInc":true
    },
  "Values":[1,2]
}

# aggregates in select, binary expression
"select count(*)+1 from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select count(*)+1 from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, binary expression
"select -count(*) from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select -count(*) from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, aggregate in non-aggregate function
"select fun(1, count(*)) from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select fun(1, count(*)) from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, non-aggregate function
"select fun(*) from user where id in (1, 2)"
{
  "ID": "SelectMultiShardKey",
  "Reason": "",
  "Table": "user",
  "Original":"select fun(*) from user where id in (1, 2)",
  "Rewritten": "select fun(*) from user where id in ::_vals",
  "Index": {
    "Type": 0,
    "Column": "id",
    "Name": "user_index",
    "From": "",
    "To": "",
    "Owner": "user",
    "IsAutoInc": true
  },
  "Values": [
    1,
    2
  ]
}

# aggregates in select, case Expr
"select case count(*) when a = b then d end from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select case count(*) when a = b then d end from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, case else
"select case a when a = b then d else count(*) end from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select case a when a = b then d else count(*) end from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, case WHEN cond
"select case a when count(*) = b then d else e end from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select case a when count(*) = b then d else e end from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, case WHEN expr
"select case a when a = b then count(*) else e end from user where id in (1, 2)"
{
  "ID": "NoPlan",
  "Reason": "too complex",
  "Table": "user",
  "Original":"select case a when a = b then count(*) else e end from user where id in (1, 2)",
  "Rewritten": "",
  "Index": null,
  "Values": null
}

# aggregates in select, no aggregates
"select case a when a = b then d else e end from user where id in (1, 2)"
{
  "ID": "SelectMultiShardKey",
  "Reason": "",
  "Table": "user",
  "Original":"select case a when a = b then d else e end from user where id in (1, 2)",
  "Rewritten": "select case a when a = b then d else e end from user where id in ::_vals",
  "Index": {
    "Type": 0,
    "Column": "id",
    "Name": "user_index",
    "From": "",
    "To": "",
    "Owner": "user",
    "IsAutoInc": true
  },
  "Values": [
    1,
    2
  ]
}
